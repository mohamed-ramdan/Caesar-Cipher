
import java.awt.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.application.Platform.exit;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mohamedramadan
 */
public class enc extends javax.swing.JFrame {

    /**
     * Creates new form enc
     */
    public enc() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        enc_start = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        dec_start = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        enc_start.setText("Start Encryption");
        enc_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enc_startActionPerformed(evt);
            }
        });

        jButton2.setText("X");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dec_start.setText("Start Decryption");
        dec_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dec_startActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(enc_start)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(dec_start)
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enc_start)
                    .addComponent(dec_start))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enc_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enc_startActionPerformed
        // TODO add your handling code here:
        
        JFileChooser jfc = new JFileChooser(); 
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            //code to handle choosed file here. 
            File f = jfc.getSelectedFile();
            //String nam = jfc.getSelectedFile().getName();
            //System.out.println(jfc.getSelectedFile().getName());exit();

            
            Map<Integer, Character> indexDic = new HashMap<Integer, Character>();
            indexDic.put(0,'a');
            indexDic.put(1,'b');
            indexDic.put(2,'c');
            indexDic.put(3,'d');
            indexDic.put(4,'e');
            indexDic.put(5,'f');
            indexDic.put(6,'g');
            indexDic.put(7,'h');
            indexDic.put(8,'i');
            indexDic.put(9,'j');
            indexDic.put(10,'k');
            indexDic.put(11,'l');
            indexDic.put(12,'m');
            indexDic.put(13,'n');
            indexDic.put(14,'o');
            indexDic.put(15,'p');
            indexDic.put(16,'q');
            indexDic.put(17,'r');
            indexDic.put(18,'s');
            indexDic.put(19,'t');
            indexDic.put(20,'u');
            indexDic.put(21,'v');
            indexDic.put(22,'w');
            indexDic.put(23,'x');
            indexDic.put(24,'y');
            indexDic.put(25,'z');
            
            
            
            Map<Character, Integer> letterDic = new HashMap<Character, Integer>();
            letterDic.put('a',0);
            letterDic.put('b',1);
            letterDic.put('c',2);
            letterDic.put('d',3);
            letterDic.put('e',4);
            letterDic.put('f',5);
            letterDic.put('g',6);
            letterDic.put('h',7);
            letterDic.put('i',8);
            letterDic.put('j',9);
            letterDic.put('k',10);
            letterDic.put('l',11);
            letterDic.put('m',12);
            letterDic.put('n',13);
            letterDic.put('o',14);
            letterDic.put('p',15);
            letterDic.put('q',16);
            letterDic.put('r',17);
            letterDic.put('s',18);
            letterDic.put('t',19);
            letterDic.put('u',20);
            letterDic.put('v',21);
            letterDic.put('w',22);
            letterDic.put('x',23);
            letterDic.put('y',24);
            letterDic.put('z',25);
            
            
            ArrayList<Character> result = new ArrayList<Character>();
            
            
            
            try
                {
                String path = jfc.getSelectedFile().getPath();
                FileInputStream fis = new FileInputStream(path);
                int size = fis.available();
                byte [] b= new byte[size];
                fis.read(b);
                System.out.println(new String(b));
                
                char ccr [] = new String(b).toLowerCase().toCharArray();
                
                
                
                
                
                
                int cisarKey;
//                if(enc_key.getText() == null || enc_key.getText().trim().isEmpty())
//                {
                    String cisarKeyString = JOptionPane.showInputDialog(this,
                        "What is your Key?", null);
                    cisarKey = Integer.parseInt(cisarKeyString);
                    
//                }
//                else
//                {
//                    cisarKey = Integer.parseInt(enc_key.getText());
//                }
                 
                
                //System.out.println("ZZZZZZZZZZz key " + cisarKey);
                    
                
                for(int i=0; i< ccr.length-1;i++)
                {
                    if(! letterDic.containsKey(ccr[i]))
                    {   
                        result.add(ccr[i]);
                    }
                    else
                    {
                        // cisar cipher euqtion 
                        int charElementIndex = letterDic.get(ccr[i]);
                        int charElementIndexWithKey = charElementIndex + cisarKey;
                        int encIndex = charElementIndexWithKey % 26; 
                        result.add(indexDic.get(encIndex));
                        
                    }
                    
                    
                    
                    //System.out.println(ccr[i]);
                }
                
                
                for(int i = 0; i< result.size(); i++)
                {
                    System.out.print(result.get(i));
                }
                
                
                
                
                
                
                
                
                fis.close();
                }
                catch(IOException e)
                {
                    e.printStackTrace();

                }
                
            int dialogResult = JOptionPane.showConfirmDialog (null,
                        "Would You Like to Export the Encrypted text to a file? ","Attention Please!",0);
                if(dialogResult == JOptionPane.YES_OPTION)
                {
                    
                    JFileChooser fc = new JFileChooser();
                    if(fc.showSaveDialog(this)==JFileChooser.APPROVE_OPTION)
                    {
                
                        try
                        {
                            String path = fc.getSelectedFile().getPath();
                            FileOutputStream fos = new FileOutputStream(path);
                            //byte[] b = ta.getText().getBytes();
                            for (int i = 0; i< result.size(); i++)
                            {
                                fos.write(result.get(i));
                            }
                            //fos.write(b);
                            fos.close();
                        }
                        catch(IOException e)
                        {
                            e.printStackTrace();

                        }
            }
                    
                 
//                    JFileChooser jfcc = new JFileChooser(); 
//                    if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
//                    {
//                        String path = jfcc.getSelectedFile().getPath();
//                    } 
                    //System.out.println("LOoOoOk heRe");
                }

            

        } 
    }//GEN-LAST:event_enc_startActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void dec_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dec_startActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(); 
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            //code to handle choosed file here. 
            File encFile = jfc.getSelectedFile();
            
            Map<Integer, Character> indexDic = new HashMap<Integer, Character>();
            indexDic.put(0,'a');
            indexDic.put(1,'b');
            indexDic.put(2,'c');
            indexDic.put(3,'d');
            indexDic.put(4,'e');
            indexDic.put(5,'f');
            indexDic.put(6,'g');
            indexDic.put(7,'h');
            indexDic.put(8,'i');
            indexDic.put(9,'j');
            indexDic.put(10,'k');
            indexDic.put(11,'l');
            indexDic.put(12,'m');
            indexDic.put(13,'n');
            indexDic.put(14,'o');
            indexDic.put(15,'p');
            indexDic.put(16,'q');
            indexDic.put(17,'r');
            indexDic.put(18,'s');
            indexDic.put(19,'t');
            indexDic.put(20,'u');
            indexDic.put(21,'v');
            indexDic.put(22,'w');
            indexDic.put(23,'x');
            indexDic.put(24,'y');
            indexDic.put(25,'z');
            
            Map<Character, Integer> letterDic = new HashMap<Character, Integer>();
            letterDic.put('a',0);
            letterDic.put('b',1);
            letterDic.put('c',2);
            letterDic.put('d',3);
            letterDic.put('e',4);
            letterDic.put('f',5);
            letterDic.put('g',6);
            letterDic.put('h',7);
            letterDic.put('i',8);
            letterDic.put('j',9);
            letterDic.put('k',10);
            letterDic.put('l',11);
            letterDic.put('m',12);
            letterDic.put('n',13);
            letterDic.put('o',14);
            letterDic.put('p',15);
            letterDic.put('q',16);
            letterDic.put('r',17);
            letterDic.put('s',18);
            letterDic.put('t',19);
            letterDic.put('u',20);
            letterDic.put('v',21);
            letterDic.put('w',22);
            letterDic.put('x',23);
            letterDic.put('y',24);
            letterDic.put('z',25);
            
            try
            {
                String path = jfc.getSelectedFile().getPath();
                FileInputStream fis = new FileInputStream(path);
                int size = fis.available();
                byte [] b= new byte[size];
                fis.read(b);
                System.out.println(new String(b));
                
                char result [] = new String(b).toLowerCase().toCharArray();
                ArrayList<Character> finalResult  = new ArrayList<Character>();
                // get character frequencies starts
                
                Map<Character, Integer> defaultCharsFreq = new HashMap<Character, Integer>();
                defaultCharsFreq.put('a', 3312);
                defaultCharsFreq.put('b', 573);
                defaultCharsFreq.put('c', 1568);
                defaultCharsFreq.put('d', 1602);
                defaultCharsFreq.put('e', 6192);
                defaultCharsFreq.put('f', 966);
                defaultCharsFreq.put('g', 769);
                defaultCharsFreq.put('h', 1869);
                defaultCharsFreq.put('i', 2943);
                defaultCharsFreq.put('j', 119);
                defaultCharsFreq.put('k', 206);
                defaultCharsFreq.put('l', 1579);
                defaultCharsFreq.put('m', 1500);
                defaultCharsFreq.put('n', 2982);
                defaultCharsFreq.put('o', 3261);
                defaultCharsFreq.put('p', 1074);
                defaultCharsFreq.put('q', 116);
                defaultCharsFreq.put('r', 2716);
                defaultCharsFreq.put('s', 3072);
                defaultCharsFreq.put('t', 4358);
                defaultCharsFreq.put('u', 1329);
                defaultCharsFreq.put('v', 512);
                defaultCharsFreq.put('w', 748);
                defaultCharsFreq.put('x', 123);
                defaultCharsFreq.put('y', 727);
                defaultCharsFreq.put('z', 16);
                
                
                Map<Character, Integer> encCharsFreq = new HashMap<Character, Integer>();
                encCharsFreq.put('a', 0);
                encCharsFreq.put('b', 0);
                encCharsFreq.put('c', 0);
                encCharsFreq.put('d', 0);
                encCharsFreq.put('e', 0);
                encCharsFreq.put('f', 0);
                encCharsFreq.put('g', 0);
                encCharsFreq.put('h', 0);
                encCharsFreq.put('i', 0);
                encCharsFreq.put('j', 0);
                encCharsFreq.put('k', 0);
                encCharsFreq.put('l', 0);
                encCharsFreq.put('m', 0);
                encCharsFreq.put('n', 0);
                encCharsFreq.put('o', 0);
                encCharsFreq.put('p', 0);
                encCharsFreq.put('q', 0);
                encCharsFreq.put('r', 0);
                encCharsFreq.put('s', 0);
                encCharsFreq.put('t', 0);
                encCharsFreq.put('u', 0);
                encCharsFreq.put('v', 0);
                encCharsFreq.put('w', 0);
                encCharsFreq.put('x', 0);
                encCharsFreq.put('y', 0);
                encCharsFreq.put('z', 0);
                
                
                
                // update letters frequency 
                for(int i = 0 ; i< result.length; i++)
                {
                    if(encCharsFreq.containsKey(result[i]))
                    {
                        int newFreq = encCharsFreq.get(result[i]) +1;
                        encCharsFreq.put(result[i], newFreq);
                    }
                    
                }
                
                
                // KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
                
                int key=0;
                ArrayList<Double> estimationKeys = new ArrayList<Double>();
                
                
                
                // KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
                
               //.. Psudo Code here
                // for each case from 1 - 26
                // 1-  Arraylist<int> = getmyFreqList(int key, map encCharsFreq);
                // 2-  method take the array list and map default freq retun int sum default * actual 
                //     getSumMultFreqDefuActu(Map defaultFreq, ArrayList actualFreq, ndexDic)
                // 3-  int getSumOfDefuFreq()
                // 4-  int getSumOfMsgFreq() done//
                // 5- double getSumOfDefuFreqPow2()
                // 6- double getSumOfMsgFreqPow2()
                
                
                
                
                // KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
                
                for(int i = 1; i<26; i++)
                {
                    ArrayList<Integer> MsgFreqKeyBased = getmyFreqList(i, encCharsFreq);
                    int SumOfMultiDefuFreqToMsgFreqKeyBased = getSumMultFreqDefuActu(defaultCharsFreq,MsgFreqKeyBased,indexDic);
                    int DefuFreqSum = getSumOfDefuFreq(defaultCharsFreq, indexDic);
                    int MsgFreqSum = getSumOfMsgFreq(encCharsFreq, indexDic);
                    double DefuFreqSumPow2 = getSumOfDefuFreqPow2(defaultCharsFreq, indexDic);
                    double MsgFreqSumPow2 = getSumOfMsgFreqPow2(encCharsFreq, indexDic);



                    // Power of sumDefault
                    double powerOfSumDefault = DefuFreqSum * DefuFreqSum;

                    // power of sumEncChar
                    double powerOfSumEncChar = MsgFreqSum * MsgFreqSum;

                    // 1st square root of x
                    double xSqrt = Math.sqrt(26 * DefuFreqSumPow2 - powerOfSumDefault);

                    // 2nd square root of y
                    double ySqrt = Math.sqrt(26 * MsgFreqSumPow2 - powerOfSumEncChar);


                    double totalTop = 26 * SumOfMultiDefuFreqToMsgFreqKeyBased - DefuFreqSum  * MsgFreqSum;

                    double totalBottom = xSqrt * ySqrt;

                    double total = totalTop / totalBottom;


                    System.out.println(total); 
                    estimationKeys.add(total);
                    
                }
                
                
                System.out.println("End of calculation");
                
                double maxVal=estimationKeys.get(0);
                int indexOfMaxVal =0;
                for(int i=0; i<estimationKeys.size()-1; i++)
                {
                    if(estimationKeys.get(i+1) > maxVal)
                    {
                        maxVal=estimationKeys.get(i+1);
                        indexOfMaxVal=estimationKeys.indexOf(maxVal);
                    }
                }
                System.out.println("###################################3");
                System.out.println("Max Vale is: "+ maxVal + " , and Index of it is: " +indexOfMaxVal);
                System.out.println("And the Key is: "+ (25 - indexOfMaxVal));
                int theKey = 25 - indexOfMaxVal;
                
                
                
                
                
                for(int i=0; i< result.length-1;i++)
                {
                    if(! letterDic.containsKey(result[i]))
                    {   
                        finalResult.add(result[i]);
                    }
                    else
                    {
                        // cisar cipher euqtion 
                        int charElementIndex = letterDic.get(result[i]);
                        int charElementIndexWithKey = charElementIndex - theKey;
                        int encIndex = charElementIndexWithKey % 26; 
                        finalResult.add(indexDic.get(encIndex));
                        
                    }
                }
                
                for(int i = 0; i< finalResult.size(); i++)
                {
                    if(finalResult.get(i) == null)
                    {
                        finalResult.set(i, ' ');
                    }
                }
                for(int i = 0; i< finalResult.size(); i++)
                {
                    System.out.print(finalResult.get(i));
                }
                
              
                fis.close();
            
                
                int dialogResult = JOptionPane.showConfirmDialog (null,
                        "Would You Like to Export the Decrypted text to a file? ","Attention Please!",0);
                if(dialogResult == JOptionPane.YES_OPTION)
                {
                    
                    JFileChooser fc = new JFileChooser();
                    if(fc.showSaveDialog(this)==JFileChooser.APPROVE_OPTION)
                    {
                
                       
                            String paths = fc.getSelectedFile().getPath();
                            FileOutputStream fos = new FileOutputStream(paths);
                            //byte[] b = ta.getText().getBytes();
                            for(int i = 0; i< finalResult.size(); i++)
                            {
                                fos.write(finalResult.get(i));
                            }
                            fos.close();
                        
                    }
                }    
                
            }
            catch(IOException e)
                {
                    e.printStackTrace();

                }
        
            
             
            
            
        }
        
        
        
    }//GEN-LAST:event_dec_startActionPerformed

    
    private double getSumOfMsgFreqPow2(Map<Character, Integer> encCharsFreq, Map<Integer, Character> indexDic)
    {
        double sumOfEncCharPoweredToTwo=0;
        for (int i =0; i< encCharsFreq.size(); i++)
        {
            sumOfEncCharPoweredToTwo += encCharsFreq.get(indexDic.get(i)) * encCharsFreq.get(indexDic.get(i));
        }
        return sumOfEncCharPoweredToTwo;
    }
    
    
    private double getSumOfDefuFreqPow2(Map<Character, Integer> defaultCharsFreq, Map<Integer, Character> indexDic)
    {
        double sumOfDefaultPoweredToTwo=0;
        for (int i =0; i< defaultCharsFreq.size(); i++)
        {
            sumOfDefaultPoweredToTwo += defaultCharsFreq.get(indexDic.get(i)) * defaultCharsFreq.get(indexDic.get(i));
        }
        return sumOfDefaultPoweredToTwo;
    
    }
    
    
    
    private int getSumOfMsgFreq(Map<Character, Integer> encCharsFreq, Map<Integer, Character> indexDic)
    {
        int sumOfEncCharFreq = 0;
        for(int incre=0; incre < encCharsFreq.size(); incre++)
        {
            sumOfEncCharFreq += encCharsFreq.get(indexDic.get(incre));
        }
        return sumOfEncCharFreq;
    }
    
    private int getSumOfDefuFreq(Map<Character, Integer> defaultCharsFreq, Map<Integer, Character> indexDic)
    {
        int sumOfDefaultFreq =0;
        for(int incre=0; incre < defaultCharsFreq.size(); incre++)
        {
            sumOfDefaultFreq += defaultCharsFreq.get(indexDic.get(incre));
        }
        return sumOfDefaultFreq;
    }
    
    
    
    private int getSumMultFreqDefuActu(Map<Character, Integer> defaultFreq, ArrayList<Integer> actualFreq, Map<Integer, Character> indexDic)
    {
        int sumOfDefaultAndEncFreq=0;
                for (int i =0; i< defaultFreq.size(); i++)
                {
                    sumOfDefaultAndEncFreq += defaultFreq.get(indexDic.get(i)) * actualFreq.get(i);
                }
        return sumOfDefaultAndEncFreq;
    }
    
    private ArrayList<Integer> getmyFreqList(int key, Map<Character, Integer> encCharsFreq )
    {
        ArrayList<Integer> newFreqCorr_key1 = new ArrayList<Integer>();
        newFreqCorr_key1.clear();
        if(key == 1 )
        {
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
        }
        else if(key == 2)
        {
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
        }
        else if(key == 3)
        {
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
        }
        else if(key == 4)
        {
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
        }
        else if(key == 5)
        {
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
        }
        else if(key == 6)
        {
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
        }
        else if(key == 7)
        {
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
        }
        else if(key == 8)
        {
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
        }
        else if(key == 9)
        {
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
        }
        else if(key == 10)
        {
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
        }
        else if(key == 11)
        {
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
        }
        else if(key == 12)
        {
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
        }
        else if(key == 13)
        {
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
        }
        else if(key == 14)
        {
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
        }
        else if(key == 15)
        {
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
        }
        else if(key == 16)
        {
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
        }
        else if(key == 17)
        {
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
        }
        else if(key == 18)
        {
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
        }
        else if(key == 19)
        {
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
        }
        else if(key == 20)
        {
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
        }
        else if(key == 21)
        {
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
        }
        else if(key == 22)
        {
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
        }
        else if(key == 23)
        {
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
        }
        else if(key == 24)
        {
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
            newFreqCorr_key1.add(encCharsFreq.get('b'));
        }
        else if(key == 25)
        {
            newFreqCorr_key1.add(encCharsFreq.get('b'));
            newFreqCorr_key1.add(encCharsFreq.get('c'));
            newFreqCorr_key1.add(encCharsFreq.get('d'));
            newFreqCorr_key1.add(encCharsFreq.get('e'));
            newFreqCorr_key1.add(encCharsFreq.get('f'));
            newFreqCorr_key1.add(encCharsFreq.get('g'));
            newFreqCorr_key1.add(encCharsFreq.get('h'));
            newFreqCorr_key1.add(encCharsFreq.get('i'));
            newFreqCorr_key1.add(encCharsFreq.get('j'));
            newFreqCorr_key1.add(encCharsFreq.get('k'));
            newFreqCorr_key1.add(encCharsFreq.get('l'));
            newFreqCorr_key1.add(encCharsFreq.get('m'));
            newFreqCorr_key1.add(encCharsFreq.get('n'));
            newFreqCorr_key1.add(encCharsFreq.get('o'));
            newFreqCorr_key1.add(encCharsFreq.get('p'));
            newFreqCorr_key1.add(encCharsFreq.get('q'));
            newFreqCorr_key1.add(encCharsFreq.get('r'));
            newFreqCorr_key1.add(encCharsFreq.get('s'));
            newFreqCorr_key1.add(encCharsFreq.get('t'));
            newFreqCorr_key1.add(encCharsFreq.get('u'));
            newFreqCorr_key1.add(encCharsFreq.get('v'));
            newFreqCorr_key1.add(encCharsFreq.get('w'));
            newFreqCorr_key1.add(encCharsFreq.get('x'));
            newFreqCorr_key1.add(encCharsFreq.get('y'));
            newFreqCorr_key1.add(encCharsFreq.get('z'));
            newFreqCorr_key1.add(encCharsFreq.get('a'));
        }
        
        
                
        return newFreqCorr_key1;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(enc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(enc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(enc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(enc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new enc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dec_start;
    private javax.swing.JButton enc_start;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
